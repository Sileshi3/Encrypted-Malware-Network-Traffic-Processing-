#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Sep 13 15:02:19 2021

@author: elliot
"""
 
import ujson as json 
import gzip
from collections import defaultdict 
import os 
import numpy as np
import time 

# Min_f_inter_a_t_d,Max_f_inter_a_t_d,Mean_f_inter_a_t_d,STD_f_inter_a_t_d,Min_f_pckt,Max_f_pckt,Mean_f_pckts,STD_f_pckts,Packet_size_variance
# Min_b_inter_a_t_d,Max_b_inter_a_t_d,Mean_b_inter_a_t_d,STD_b_inter_a_t_d,Min_b_pckt,Max_b_pckt,Mean_b_pckts,STD_b_pckts

def statistical_forward_packet_features(flow):  
    forwarded_pkt=[]
    forwarded_pkt_arr=[]
    frwd_i_a_time_arr=[]
    packet_size_variance=[]
    if (len(flow['packets']) == 0):
        print("No packet")
    if len(flow['packets']) !=0: 
       j=0
       for i in range(0, len(flow['packets'])):
           packet_size_variance.append(flow['packets'][i]['b'])
           if (flow['packets'][i]['dir']=='>' and j<5):
               forwarded_pkt.append(flow['packets'][i])
               forwarded_pkt_arr.append(flow['packets'][i]['b'])
               j+=1
       # print(forwarded_pkt_arr)
       for i in range(0,len(forwarded_pkt)-1):
            holder=forwarded_pkt[i]['ipt']
            frwd_i_a_time=(forwarded_pkt[i+1]['ipt']-holder)
            frwd_i_a_time_arr.append(frwd_i_a_time)
    return min(frwd_i_a_time_arr),max(frwd_i_a_time_arr),round(np.mean(frwd_i_a_time_arr),2),\
           round(np.std(frwd_i_a_time_arr),2),min(forwarded_pkt_arr),max(forwarded_pkt_arr),\
           round(np.mean(forwarded_pkt_arr),2),round(np.std(forwarded_pkt_arr),2),round(np.var(packet_size_variance),2)
           
            
def statistical_backward_packet_features(flow):  
    backwarded_pkt=[]
    backwarded_pkt_arr=[]
    backward_i_a_time_arr=[]
    if (len(flow['packets']) == 0):
        print("No packet")
    if len(flow['packets']) !=0: 
       j=0
       for i in range(0, len(flow['packets'])):
           if (flow['packets'][i]['dir']=='<' and j<5):
               backwarded_pkt.append(flow['packets'][i])
               backwarded_pkt_arr.append(flow['packets'][i]['b']) 
               j+=1
       # print(backwarded_pkt_arr)
       for i in range(0,len(backwarded_pkt)-1):
            holder=backwarded_pkt[i]['ipt']
            bkwrdd_i_a_time=(backwarded_pkt[i+1]['ipt']-holder)
            backward_i_a_time_arr.append(bkwrdd_i_a_time)  
    return min(backward_i_a_time_arr),max(backward_i_a_time_arr),round(np.mean(backward_i_a_time_arr),2),\
           round(np.std(backward_i_a_time_arr),2),min(backwarded_pkt_arr),max(backwarded_pkt_arr),\
           round(np.mean(backwarded_pkt_arr),2),round(np.std(backwarded_pkt_arr),2)
            


def Statistical_Features(inPathName, fileName, tls):
    json_file = "%s%s" % (inPathName, fileName)
    print("\processing TLS for %s" %(json_file)) #verbose
    #read each line and convert it into dict
    lineno = 0   
    with gzip.open(json_file,'r') as fp:  
        total_flow_count=0
        for line in fp:
            lineno = lineno + 1
            tmp = json.loads(line) 
            if ('version' in tmp) or ("tls" not in tmp) or (int(tmp["dp"]) != 443):
                continue
            if ('version' not in tmp) and 'tls' in tmp   and (int(tmp["dp"]) == 443):
                if total_flow_count>3:                
                    continue
                else:     
                        statistical_feature=statistical_forward_packet_features(tmp)+statistical_backward_packet_features(tmp) 
                        # print(statistical_feature)
                        total_flow_count+=1 
    return statistical_feature         

def main():  
    inputF='/home/elliot/Desktop/Json_Files/Fuck/'
    Files = os.listdir(inputF)
    Files.sort()
    print("Total Files :",len(Files))
    allFile=False
    if inputF == None or not os.path.isdir(inputF):
        print("No valid input folder!")
    else:
        joyFolder = inputF
        if not joyFolder.endswith('/'):
            joyFolder += '/'
    parentFolder = os.path.abspath(os.path.join(joyFolder, os.pardir))
    if not parentFolder.endswith('/'):
        parentFolder += '/'  
    if json:
        if allFile == True: 
            tls = defaultdict() 
        files = os.listdir(joyFolder)
        for item in files:  
                tls = defaultdict()
                Statistical_Features(joyFolder, item, tls) 
if __name__ == "__main__":
    ts=time.time()
    main() 