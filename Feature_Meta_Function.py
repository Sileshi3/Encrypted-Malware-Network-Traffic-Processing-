#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep  3 10:14:24 2021

@author: elliot
"""

    
def Analyze_TLS(inPathName, fileName, tls):
    json_file = "%s%s" % (inPathName, fileName)
    print("\n")
          # processing TLS for %s" %(json_file)) #verbose
    #read each line and convert it into dict
    lineno = 0
    size_cs=len(cs_dictionary)
    cs_holder_binary=[0]*size_cs 
    new_cipher_holder=[]
    with gzip.open(json_file,'r') as fp:
        cs_holder_array=[]
        tls_holder_array=[]
        serverAddr_holder=[]
        size_ext=len(extesions)
        zero_exts=[0]*size_ext
        zero_cs=[0]*size_cs
        i=0
        total_data=[]
        total_flow_count=0
        for line in fp:
            lineno = lineno + 1
            tmp = json.loads(line)
            
            if ('version' in tmp) or ("tls" not in tmp) or (int(tmp["dp"]) != 443):
                continue
            if ('version' not in tmp) and 'tls' in tmp   and (int(tmp["dp"]) == 443):
                serverAddr = "%s__%s__%s"%(tmp["sa"],str(tmp["sp"]),tmp["da"])
                resp = tmp["tls"] 
                if total_flow_count>50000:
                    continue
                else:    
                    if('s_cert' not in resp or serverAddr in serverAddr_holder):
                        continue
                    else:
                        serverAddr_holder.append(serverAddr)
                        tls[serverAddr] = defaultdict()
                        tls[serverAddr]['count'] = 1
                        tls[serverAddr]['ts_start'] = tmp["time_start"]
                        tls[serverAddr]['ts_end'] = tmp["time_end"]
                        if "cs" in resp:
                            tls[serverAddr]['clientCS'] = resp["cs"]
                            cs_holder_array=tls[serverAddr]['clientCS']
                            for a in range(0,len(cs_holder_array)):
                                x=str(cs_holder_array[a])
                                if x in cs_dictionary:
                                    index=cs_dictionary.index(x)
                                    cs_holder_binary[index]=1
                            for j in range(0,len(cs_holder_array)):
                                d=str(cs_holder_array[j])
                                if d not in cs_dictionary:
                                    # print(json_file)
                                    # print("New CipherSuit :",d)
                                    # if d not in new_cipher_holder:
                                    #     new_cipher_holder.append(d)
                                    pass
                            stringI=str(i)
                            fileName, file_extension=os.path.splitext(fileName)
                            fileNames=str(fileName+'__'+stringI)
                            tls_holder_array=cs_holder_binary
                            i=i+1  
                        else:
                            tls[serverAddr]['clientCS'] = zero_cs
                            tls_holder_array=tls_holder_array+tls[serverAddr]['clientCS']
                            # print("Has No Client CS",json_file)
                        if "c_extensions" in resp:  
                            
                            tls[serverAddr]['clientExt'] = obtainExtList(resp["c_extensions"]) 
                            tls_holder_array=tls_holder_array+tls[serverAddr]['clientExt'] 
                        else:
                            tls[serverAddr]['clientExt'] =zero_exts
                            tls_holder_array=tls_holder_array+tls[serverAddr]['clientExt']   
                            # print("Has No ClientExt",json_file,tls[serverAddr]['clientExt'])
                        if "c_key_length" in resp:
                            tls[serverAddr]['clientKeyLen'] = resp["c_key_length"]-16
                            tls_holder_array.append(resp["c_key_length"]-16)
                        else:
                            tls[serverAddr]['clientKeyLen'] =0
                            tls_holder_array.append(tls[serverAddr]['clientKeyLen']) 
                            # print("Has No Client Key",json_file)
                        
                        if "s_extensions" in resp:
                            
                            tls[serverAddr]['serverExt'] = obtainExtList(resp["s_extensions"])
                            tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt']
                        else:                        
                            tls[serverAddr]['serverExt'] = zero_exts
                            tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt'] 
                            # print("Has No Server Ext",json_file)
                          
                        if "s_cert" in resp:
                            cert = resp["s_cert"]
                            
                            #6. number of certificates
                            tls[serverAddr]['certCount'] = len(cert)
                            tls_holder_array.append(tls[serverAddr]['certCount']) 
                            
                            #7. number of validity in day
                            tls[serverAddr]['certValidDays'] = obtainValidList(cert) #list of validity
                            tls_holder_array.append(tls[serverAddr]['certValidDays'][0])
                            
                            #8. whether self-signed
                            tls[serverAddr]['certSelfSigned'] = obtainSelfSigned(cert)
                            if tls[serverAddr]['certSelfSigned']=='False':
                                tls_holder_array.append(0)
                            else:
                                tls_holder_array.append(1)
                                
                            #9. number of subject alternative names 
                            tls[serverAddr]['certSubAltNames'] = obtainSANs(cert)
                            if (len(tls[serverAddr]['certSubAltNames'])==0):
                                tls_holder_array.append(0)
                            else:
                                tls_holder_array.append(tls[serverAddr]['certSubAltNames'][0]) 
                        else: 
                            tls[serverAddr]['certCount'] = 0
                            tls_holder_array.append(tls[serverAddr]['certCount'])
                            tls[serverAddr]['certValidDays'] = []
                            if (len(tls[serverAddr]['certValidDays'])==0):
                                tls_holder_array.append(0)
                            tls[serverAddr]['certSelfSigned'] = 0
                            tls_holder_array.append(tls[serverAddr]['certSelfSigned'])
                            tls[serverAddr]['certSubAltNames'] = []
                            tls_holder_array.append(0) 
                            # server-selected ciphersuite
                        if "scs" in resp:
                            temp = []
                            temp.append(resp["scs"])
                            tls[serverAddr]['serverCS'] = temp #list of strings    
                            # tls_holder_array.append(tls[serverAddr]['serverCS'][0])
                        else:
                            tls[serverAddr]['serverCS'] = []
                            # tls_holder_array.append(0)
                            print("Has No Server CS",json_file)
                        
                                 #1 times
                        tls[serverAddr]['flowTimes'] = getTimes(tmp)
                        flow_times_Flatten=tls[serverAddr]['flowTimes']
                        
                        #2 lengths
                        tls[serverAddr]['flowLengths'] = getLengths(tmp)
                        flow_length_Flatten=tls[serverAddr]['flowLengths'] 
                        
                        # meta_features=getMetadata(tmp)
                        Splt_Flatten=flow_length_Flatten+flow_times_Flatten
                        
                        
                        meta=[]
                        meta=getMetadata(tmp)
                        tls_holder_array.append(1)
                        # tls_holder_array.append(fileName)
                    
                    
                    # print(">>>>>>>>>>========================================>>>>>>>>")
                    # toExcel(total_data,fileNames)  
                    # print("Meta Length:",len(meta),len(tls_holder_array))
                    t=[]
                    
                    if (len(tls_holder_array)>235):
                        t=tls_holder_array[0:235]
                        print("Meta Length:",len(meta),len(t))
                    else:
                        t=tls_holder_array
                        # print(serverAddr)
                    total_data=t
                    print(total_data,"\n")
                    
                    total_flow_count+=1 
    return total_data         