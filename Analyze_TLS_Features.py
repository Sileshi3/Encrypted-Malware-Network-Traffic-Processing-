#!/usr/bin/env python
# coding: utf-8

# In[1]:
import ujson as json
import sys
import gzip
from collections import defaultdict
import argparse
import os
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pathlib
import xlsxwriter
from openpyxl import load_workbook
from openpyxl import Workbook
import csv
import time
import openpyxl
#for valid days
#format ASN1_TIME: Aug 8 12:49:31 2017 GMT
daysPassed = {}
daysPassed["Jan"] = 0
daysPassed["Feb"] = 31
daysPassed["Mar"] = 59
daysPassed["Apr"] = 90
daysPassed["May"] = 120
daysPassed["Jun"] = 151
daysPassed["Jul"] = 181
daysPassed["Aug"] = 212
daysPassed["Sep"] = 243
daysPassed["Oct"] = 273
daysPassed["Nov"] = 304
daysPassed["Dec"] = 334



cs_dictionary_unsorted=['0003','0004','0005','0006','0007','0008','0009','000a','000d','0010','0011','0012','0013',
               '0014','0015','0016','002f','0030','0031','0032','0033','0035','0036','0037','0038','0039',
               '003c','003d','003e','003f','0040','0041','0042','0043','0044','0045','0062','0063','0064',
               '0067','0068','0069','006a','006b','0084','0085','0086','0087','0088','0096','0097','0098',
               '0099','009a','009c','009d','009e','009f','00a0','00a1','00a2','00a3','00a4','00a5','00ba',
               '00bd','00be','00c0','00c3','00c4','00ff','1301','1302','1303','1304','c002','c003','c004',
               'c005','c007','c008','c009','c00a','c00c','c00d','c00e','c00f','c011','c012','c013','c014',
               'c016','c017','c018','c019','c023','c024','c025','c026','c027','c028','c029','c02a','c02b',
               'c02c','c02d','c02e','c02f','c030','c031','c032','c050','c051','c052','c053','c056','c057',
               'c05c','c05d','c060','c061','c072','c073','c076','c077','c07a','c07b','c07c','c07d','c086',
               'c087','c08a','c08b','c09c','c09d','c09e','c09f','c0a0','c0a1','c0a2','c0a3','c0ac','c0ad',
               'c0ae','c0af','cca8','cca9','ccaa','feff','ffff','00a7','006d','003a','0089','00a6','006c',
               '0034','009b','0046','0018','001b','c022','c021','c01c','c01b','c01f','c01e','dada','cc14',
               'cc13','2a2a']
cs_dictionary=sorted(cs_dictionary_unsorted)
extesions_unsorted=['0000','0001','0002','0003','0004','0005','0006','0007','0008','0009','000a','000b','000c','000d',
           '000e','000f','0010','0011','0012','0013','0014','0015','0016','0017','0018','0019','0023','3374',
           'ff01']
extesions=sorted(extesions_unsorted)
print(len(cs_dictionary))
print(len(extesions))
# 0x0000 server_name
# 0x0005 status_request
# 0x000a supported_groups
# 0x000b ec_point_formats
# 0x000d signature_algorithms
# 0x000f heartbeat
# 0x0015 padding
# 0x0017 extended_master_secret
# 0x0023 SessionTicket TLS
# 0x3374 next_protocol_negotiation
# 0xff01 renegotiation_info
# for extension
extMap = {"server_name": 0,"max_fragment_length" : 1, "client_certificate_url" : 2, "trusted_ca_keys": 3,
          "truncated_hmac": 4, "status_request" : 5,"user_mapping" : 6,"client_authz":7,"server_authz": 8, 
          "cert_type":9,"supported_groups" :10,"ec_point_formats" : 11,"srp" :12,"signature_algorithms":13,
          "use_srtp":14,"heartbeat" : 15,"application_layer_protocol_negotiation":16,"status_request_v2":17, 
          "signed_certificate_timestamp" : 18, "client_certificate_type" : 19,"server_certificate_type" : 20,
          "padding" : 21, "encrypt_then_mac" : 22, "extended_master_secret" : 23,"token_binding" : 24, 
          "cached_info":25, "session_ticket" : 35,"renegotiation_info" : 65281}
# '0033', '002b', '002d', '001c'

def saveToJson(outPathName, fileName, tls):
    fname = "%s%s.json" % (outPathName, (fileName.split('.'))[0]) 
#     print("Saving JSON to " + fname) #verbose
    with open(fname, 'w') as fp:
        json.dump(tls, fp)  
                
def toExcel(data,fileName): 
        excel_Dir='/home/elliot/Desktop/Thesis/Main_Features/Excel_Output_Folder/'
        filename, file_extension=os.path.splitext(fileName)
        xlsfile = excel_Dir+filename+'.xlsx'
        my_list = [data]
        ex=str(xlsfile) 
        file = pathlib.Path(ex)
        if file.exists ():
            wb = load_workbook(ex)
            worksheet = wb.add_worksheet()
            print ("File exist")        
            for row_num, row_data in enumerate(my_list):
                for col_num, col_data in enumerate(row_data):
                    worksheet.write(row_num, col_num, col_data)
            wb.close()
        else:
            workbook = xlsxwriter.Workbook(ex)
            worksheet = workbook.add_worksheet()
            for row_num, row_data in enumerate(my_list):
                for col_num, col_data in enumerate(row_data):
                    worksheet.write(row_num, col_num, col_data)
            workbook.close()
def excelAggregator():
    cwd = os.chdir('/home/elliot/Desktop/Thesis/Main_Features/Excel_Output_Folder/')
    Files = os.listdir('/home/elliot/Desktop/Thesis/Main_Features/Excel_Output_Folder') 
    Files.sort()
    excel_names=[]
    for file in Files:
        if file.endswith('.xlsx'):
                excel_names.append(file)
#     print("Total Excel files :",len(excel_names))
    files = os.listdir(cwd) 
    files.sort()    
    direc='/home/elliot/Desktop/Thesis/Main_Features/Excel_Output_Folder/'
    excels = [pd.ExcelFile(str(direc+name)) for name in excel_names]
    frames = [x.parse(x.sheet_names[0], header=None,index_col=None) for x in excels]
    frames[0:] = [df[0:] for df in frames[0:]]
    combined = pd.concat(frames)
    combined.to_excel("Meta_Features.xlsx", header=False, index=False)
    
    for f in Files:
        if f=='Meta_Features.xlsx':
            continue
        else:
            os.remove(os.path.join('/home/elliot/Desktop/Thesis/Main_Features/Excel_Output_Folder', f))

def obtainDay(tstamp):
    t = tstamp.split()
    month = t[0]
    day = int(t[1])
    year = int(t[3])
    return daysPassed[month]+day+(year-2000)*365

def obtainExtList(cexts):
    size_ext=len(extesions)
    exts=[0]*size_ext
    ext_holder_array=[]
    ext_holder_array=cexts
    for item in cexts: 
        if 'kind' in item: 
            pass
        else:
            x=str("%0.4x" %(extMap[list((item.keys()))[0]]))
            if x in extesions:
                index=extesions.index(x)
                exts[index]=1 
    # print(ext_holder_array[1].keys())            
    for j in ext_holder_array: 
        if 'kind' in j: 
            pass
        else:
            d=str("%0.4x" %(extMap[list((j.keys()))[0]]))
            if d not in extesions:
                print("New Extesion :",d) 
    return exts

def obtainValidList(scerts):
    valid = []
    for item in scerts:
        if ("validity_not_before" in item) and ("validity_not_after" in item):
            before = item["validity_not_before"]
            after = item["validity_not_after"]
            t1 = obtainDay(before)
            t2 = obtainDay(after)
            valid.append(t2-t1)
    return valid

def obtainSelfSigned(scerts):
    if len(scerts) > 1 or len(scerts) == 0:
        return 0
    elif ("issuer" in scerts[0]) and ("subject" in scerts[0]):
        return scerts[0]["issuer"] == scerts[0]["subject"]
    else:
        return 0

def obtainSANs(scerts):
    try:
        sans = []
        for cert in scerts:
            exts = cert["extensions"]
            for ext in exts:
                key = list((ext.keys()))[0]
                if key.find("Subject Alternative Name") != -1:
                    sans.append(len(ext[key].split(',')))
        # print("Server Alt Names :",sans)
        return sans
    except:
        return []
def getMetadata(flow): 
    tmp = []
    # inbound bytes
    if 'bytes_in' in flow:
        tmp.append(flow['bytes_in']) 
    else:
        tmp.append(0)
    # outbound bytes
    if 'bytes_out' in flow:
        tmp.append(flow['bytes_out']) 
    else:
        tmp.append(0)
    # inbound packets
    if 'num_pkts_in' in flow:
        tmp.append(flow['num_pkts_in'])
    else:
        tmp.append(0)
    # outbound packets
    if 'num_pkts_out' in flow:
        tmp.append(flow['num_pkts_out']) 
    else:
        tmp.append(0)
    # elapsed time of flow
    if flow['packets'] == []:
        tmp.append(0)
    else:
        time = 0
        for packet in flow['packets']:
            time += packet['ipt']
        tmp.append(time)
#     if 'sa' in flow:
#         tmp.append(flow['sa']) 
#     else:
#         tmp.append(0)
#     if 'da' in flow:
#         tmp.append(flow['da']) 
#     else:
#         tmp.append(0)
    return tmp

def Analyze_TLS(inPathName, fileName, tls):
    json_file = "%s%s" % (inPathName, fileName)
    print("processing TLS for %s" %(json_file)) #verbose
    #read each line and convert it into dict
    lineno = 0
    size_cs=len(cs_dictionary)
    cs_holder_binary=[0]*size_cs
    with gzip.open(json_file,'r') as fp:
        cs_holder_array=[]
        tls_holder_array=[]
        size_ext=len(extesions)
        zero_exts=[0]*size_ext
        zero_cs=[0]*size_cs
        i=0
        for line in fp:
            lineno = lineno + 1
            tmp = json.loads(line)
            
            if ('version' in tmp) or ("tls" not in tmp) or (int(tmp["dp"]) != 443):
                continue
            if ('version' not in tmp) and 'tls' in tmp   and (int(tmp["dp"]) == 443):
                serverAddr = "%s__%s__%s"%(tmp["sa"],str(tmp["sp"]),tmp["da"])
                resp = tmp["tls"]
                if('s_cert' not in resp):
                    continue
                else:
                    tls[serverAddr] = defaultdict()
                    tls[serverAddr]['count'] = 1
                    tls[serverAddr]['ts_start'] = tmp["time_start"]
                    tls[serverAddr]['ts_end'] = tmp["time_end"]
                    if "cs" in resp:
                        tls[serverAddr]['clientCS'] = resp["cs"]
                        cs_holder_array=tls[serverAddr]['clientCS']
                        for a in range(0,len(cs_holder_array)):
                            x=str(cs_holder_array[a])
                            if x in cs_dictionary:
                                index=cs_dictionary.index(x)
                                cs_holder_binary[index]=1
                        for j in range(0,len(cs_holder_array)):
                            d=str(cs_holder_array[j])
                            if d not in cs_dictionary:
                                print(json_file)
                                print("New CipherSuit :",d)
                        stringI=str(i)
                        fileName, file_extension=os.path.splitext(fileName)
                        fileNames=str(fileName+'__'+stringI)
                        tls_holder_array=cs_holder_binary
                        i=i+1  
                    else:
                        tls[serverAddr]['clientCS'] = zero_cs
                        tls_holder_array=tls_holder_array+tls[serverAddr]['clientCS']
                        # print("Has No Client CS",json_file)
                    if "c_extensions" in resp:  
                        
                        tls[serverAddr]['clientExt'] = obtainExtList(resp["c_extensions"]) 
                        tls_holder_array=tls_holder_array+tls[serverAddr]['clientExt'] 
                    else:
                        tls[serverAddr]['clientExt'] =zero_exts
                        tls_holder_array=tls_holder_array+tls[serverAddr]['clientExt']   
                        # print("Has No ClientExt",json_file,tls[serverAddr]['clientExt'])
                    if "c_key_length" in resp:
                        tls[serverAddr]['clientKeyLen'] = resp["c_key_length"]-16
                        tls_holder_array.append(resp["c_key_length"]-16)
                        
                    else:
                        tls[serverAddr]['clientKeyLen'] =0
                        tls_holder_array.append(tls[serverAddr]['clientKeyLen']) 
                        # print("Has No Client Key",json_file)
                    if "s_extensions" in resp:
                        
                        tls[serverAddr]['serverExt'] = obtainExtList(resp["s_extensions"])
                        tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt']
                    else:                        
                        tls[serverAddr]['serverExt'] = zero_exts
                        tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt'] 
                        # print("Has No Server Ext",json_file)
                        
                    if "s_cert" in resp:
                        cert = resp["s_cert"]
                        
                        #6. number of certificates
                        tls[serverAddr]['certCount'] = len(cert)
                        tls_holder_array.append(tls[serverAddr]['certCount']) 
                        
                        #7. number of validity in day
                        tls[serverAddr]['certValidDays'] = obtainValidList(cert) #list of validity
                        tls_holder_array.append(tls[serverAddr]['certValidDays'][0])
                        
                        #8. whether self-signed
                        tls[serverAddr]['certSelfSigned'] = obtainSelfSigned(cert)
                        if tls[serverAddr]['certSelfSigned']=='False':
                            tls_holder_array.append(0)
                        else:
                            tls_holder_array.append(1)
                            
                        #9. number of subject alternative names 
                        tls[serverAddr]['certSubAltNames'] = obtainSANs(cert)
                        if (len(tls[serverAddr]['certSubAltNames'])==0):
                            tls_holder_array.append(0)
                        else:
                            tls_holder_array.append(tls[serverAddr]['certSubAltNames'][0]) 
                    else: 
                        tls[serverAddr]['certCount'] = 0
                        tls_holder_array.append(tls[serverAddr]['certCount'])
                        tls[serverAddr]['certValidDays'] = []
                        if (len(tls[serverAddr]['certValidDays'])==0):
                            tls_holder_array.append(0)
                        tls[serverAddr]['certSelfSigned'] = 0
                        tls_holder_array.append(tls[serverAddr]['certSelfSigned'])
                        tls[serverAddr]['certSubAltNames'] = []
                        tls_holder_array.append(0) 
                        # server-selected ciphersuite
                    if "scs" in resp:
                        temp = []
                        temp.append(resp["scs"])
                        tls[serverAddr]['serverCS'] = temp #list of strings    
                        tls_holder_array.append(tls[serverAddr]['serverCS'][0])
                    else:
                        tls[serverAddr]['serverCS'] = []
                        tls_holder_array.append(0)
                        print("Has No Server CS",json_file)
                    meta=[]
                    meta=getMetadata(tmp)
                    tls_holder_array.append(fileName)
                total_data=[]
                total_data=meta+tls_holder_array
                print(">>>>>>>>>>========================================>>>>>>>>")
                toExcel(total_data,fileNames) 

def main():
    ts=time.time()
    #setup input folder and output folders          
    # inputF='/home/elliot/joy-master/JoyOutputFolder/'
    inputF='/home/elliot/Desktop/Json_Files/MTA-2020-2021'
    Files = os.listdir(inputF)
    Files.sort()
    print("Total Files :",len(Files))
    json=True
    figure=False
    allFile=False
    if inputF == None or not os.path.isdir(inputF):
        print("No valid input folder!")
        return
    else:
        joyFolder = inputF
        if not joyFolder.endswith('/'):
            joyFolder += '/'
    parentFolder = os.path.abspath(os.path.join(joyFolder, os.pardir))
    if not parentFolder.endswith('/'):
        parentFolder += '/'
    TLS_JSON_Folder = "%sTLS_JSON/" % parentFolder
    TLS_Figure_Folder = "%sTLS_Figure" % parentFolder 
    if not os.path.exists(TLS_JSON_Folder):
        os.mkdir(TLS_JSON_Folder)
    if json:
        if allFile == True: 
            tls = defaultdict()
            allFileName = ""
        files = os.listdir(joyFolder)
        for item in files:
            if allFile == True: 
                allFileName += (item.split('.'))[0] + "-"
            try:
                if allFile == False: 
                    tls = defaultdict()
                Analyze_TLS(joyFolder, item, tls)
                saveToJson(TLS_JSON_Folder, item, tls)
                if allFile == False: 
                    saveToJson(TLS_JSON_Folder, item, tls)
#                 if figure:
#                     if allFile == False: 
#                         plotTLS(tls, joyFolder, item, TLS_Figure_Folder)
            except:
                continue
        if allFile == True:
            allFileName +=  ".json"
            saveToJson(TLS_JSON_Folder, allFileName, tls)
#             if args.figure:
#                 plotTLS(tls, joyFolder, allFileName, TLS_Figure_Folder)
    #check if output figures
    if figure:
        if allFile == True: 
            allFileName = ""
            files = os.listdir(joyFolder)
            for item in files:
                allFileName += (item.split('.'))[0] + "-"
            allFileName +=  ".json"
            fName = TLS_JSON_Folder + (allFileName.split('.'))[0] + "_TLS.json"
            if os.path.exists(fName):
                try:
                    with open(fName,'r') as fp:
                        tls = json.load(fp)
#                         plotTLS(tls, joyFolder, allFileName, TLS_Figure_Folder)
                except:
                    pass
            else:
                tls = defaultdict()
                for item in files:
                    try:
                        Analyze_TLS(joyFolder, item, tls)
                    except:
                        continue
#                 try:
# #                     plotTLS(tls, joyFolder, allFileName, TLS_Figure_Folder)
#                 except:
#                     pass
        else:
            files = os.listdir(joyFolder)
            for item in files:
                try:
                    fName = TLS_JSON_Folder + (item.split('.'))[0] + "_TLS.json"
                    if os.path.exists(fName):
                        with open(fName,'r') as fp:
                            tls = json.load(fp)
#                             plotTLS(tls, joyFolder, item, TLS_Figure_Folder)
                    else:
                        tls = defaultdict()
                        Analyze_TLS(joyFolder, item, tls)
#                         plotTLS(tls, joyFolder, item, TLS_Figure_Folder)
                except:
                    continue
    print("TLS Feature Extracted")
if __name__ == "__main__":
    ts=time.time()
    main()
    excelAggregator() 
    print("Features extracted and saved to csv")
    print("Total Time Taken :",time.time()-ts,"Seconds")