#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 11 15:43:03 2021

@author: elliot
"""

import ujson as json
import csv
import gzip
from collections import defaultdict
import os
import time 
from Statistical_Features import statistical_backward_packet_features,statistical_forward_packet_features
from Flow_Length_Time_Feature_Extractor import Sequence_of_Packet_Times,Sequence_of_Packet_Lengths
from Meta_Features import Meta_Features
from Utilities import CSVWriter
from Certificate_Features import  obtainExtList,obtainValidList,obtainSelfSigned,obtainSANs





cs_dictionary_unsorted=['0003','0004','0005','0006','0007','0008','0009','000a','000d','0010','0011','0012','0013',
               '0014','0015','0016','002f','0030','0031','0032','0033','0035','0036','0037','0038','0039',
               '003c','003d','003e','003f','0040','0041','0042','0043','0044','0045','0062','0063','0064',
               '0067','0068','0069','006a','006b','0084','0085','0086','0087','0088','0096','0097','0098',
               '0099','009a','009c','009d','009e','009f','00a0','00a1','00a2','00a3','00a4','00a5','00ba',
               '00bd','00be','00c0','00c3','00c4','00ff','1301','1302','1303','1304','c002','c003','c004',
               'c005','c007','c008','c009','c00a','c00c','c00d','c00e','c00f','c011','c012','c013','c014',
               'c016','c017','c018','c019','c023','c024','c025','c026','c027','c028','c029','c02a','c02b',
               'c02c','c02d','c02e','c02f','c030','c031','c032','c050','c051','c052','c053','c056','c057',
               'c05c','c05d','c060','c061','c072','c073','c076','c077','c07a','c07b','c07c','c07d','c086',
               'c087','c08a','c08b','c09c','c09d','c09e','c09f','c0a0','c0a1','c0a2','c0a3','c0ac','c0ad',
               'c0ae','c0af','cca8','cca9','ccaa','feff','ffff','00a7','006d','003a','0089','00a6','006c',
               '0034','009b','0046','0018','001b','c022','c021','c01c','c01b','c01f','c01e','dada','cc14',
               'cc13','2a2a']


server_CS=['0004', '0005', '000a', '002f', '0033', '0035', '0039', '003c', '003d', 
           '009c', '009d', '009e', '009f', 'c009', 'c011', 'c013', 'c014', 'c027', 
           'c028', 'c02b', 'c02c', 'c02f', 'c030', 'cca8', 'cca9']


               # '1a1a', 'caca', '7a7a', 'aaaa', 'fafa', 'eaea', '6a6a', '4a4a', 'baba', '5a5a', '0a0a', '3a3a', '8a8a', '9a9a']
cs_dictionary=sorted(cs_dictionary_unsorted)
Scs_dictionary=sorted(server_CS)


# print(len(cs_dictionary))
# print(len(extesions))
# 0x0000 server_name
# 0x0005 status_request
# 0x000a supported_groups
# 0x000b ec_point_formats
# 0x000d signature_algorithms
# 0x000f heartbeat
# 0x0015 padding
# 0x0017 extended_master_secret
# 0x0023 SessionTicket TLS
# 0x3374 next_protocol_negotiation
# 0xff01 renegotiation_info
# for extension

# '0033', '002b', '002d', '001c'

def saveToJson(outPathName, fileName, tls):
    fname = "%s%s.json" % (outPathName, (fileName.split('.'))[0]) 
#     print("Saving JSON to " + fname) #verbose
    with open(fname, 'w') as fp:
        json.dump(tls, fp)  
                


        
server_cert_holder=[] 
# def Analyze_TLS(inPathName, fileName, tls):
#     json_file = "%s%s" % (inPathName, fileName)
#     print("\nprocessing TLS for %s" %(json_file)) #verbose
#     #read each line and convert it into dict
#     lineno = 0
#     size_cs=len(cs_dictionary)
#     cs_holder_binary=[0]*size_cs 
#     new_cipher_holder=[] 
#     # server_cert_holder=[]
#     with gzip.open(json_file,'r') as fp:
#         cs_holder_array=[]
#         serverAddr_holder=[]
#         size_ext=len(extesions)
#         zero_exts=[0]*size_ext
#         zero_cs=[0]*size_cs
#         i=0
#         total_data=[]
#         total_flow_count=0
#         for line in fp:
#             lineno = lineno + 1
#             tmp = json.loads(line)
            
#             if ('version' in tmp) or ("tls" not in tmp) or (int(tmp["dp"]) != 443):
#                 continue
#             if ('version' not in tmp) and 'tls' in tmp   and (int(tmp["dp"]) == 443):
#                 serverAddr = "%s__%s__%s"%(tmp["sa"],str(tmp["sp"]),tmp["da"])
#                 resp = tmp["tls"] 
#                 if total_flow_count>500:
#                     continue
#                 else:    
#                     if('s_cert' not in resp or serverAddr in serverAddr_holder):
#                         continue
#                     else:
#                         tls_holder_array=[]
#                         serverAddr_holder.append(serverAddr)
#                         tls[serverAddr] = defaultdict()
#                         tls[serverAddr]['count'] = 1
#                         tls[serverAddr]['ts_start'] = tmp["time_start"]
#                         tls[serverAddr]['ts_end'] = tmp["time_end"]
                        
#                         if "c_key_length" in resp:
#                             tls[serverAddr]['clientKeyLen'] = resp["c_key_length"]-16
#                             tls_holder_array.append(resp["c_key_length"]-16)
#                         else:
#                             tls[serverAddr]['clientKeyLen'] =0
#                             tls_holder_array.append(tls[serverAddr]['clientKeyLen']) 
#                             # print("Has No Client Key",json_file)
#                         if "s_cert" in resp:
#                             cert = resp["s_cert"]
                            
#                             #6. number of certificates
#                             tls[serverAddr]['certCount'] = len(cert)
#                             tls_holder_array.append(tls[serverAddr]['certCount']) 
                            
#                             #7. number of validity in day
#                             tls[serverAddr]['certValidDays'] = obtainValidList(cert) #list of validity
#                             tls_holder_array.append(tls[serverAddr]['certValidDays'][0])
                            
#                             #8. whether self-signed
#                             tls[serverAddr]['certSelfSigned'] = obtainSelfSigned(cert)
#                             if tls[serverAddr]['certSelfSigned']=='False':
#                                 tls_holder_array.append(0)
#                             else:
#                                 tls_holder_array.append(1)
                                
#                             #9. number of subject alternative names 
#                             tls[serverAddr]['certSubAltNames'] = obtainSANs(cert)
#                             if (len(tls[serverAddr]['certSubAltNames'])==0):
#                                 tls_holder_array.append(0)
#                             else:
#                                 tls_holder_array.append(tls[serverAddr]['certSubAltNames'][0]) 
#                         else: 
#                             tls[serverAddr]['certCount'] = 0
#                             tls_holder_array.append(tls[serverAddr]['certCount'])
#                             tls[serverAddr]['certValidDays'] = []
#                             if (len(tls[serverAddr]['certValidDays'])==0):
#                                 tls_holder_array.append(0)
#                             tls[serverAddr]['certSelfSigned'] = 0
#                             tls_holder_array.append(tls[serverAddr]['certSelfSigned'])
#                             tls[serverAddr]['certSubAltNames'] = []
#                             tls_holder_array.append(0) 
#                             # server-selected ciphersuite
#                         if "s_extensions" in resp:
#                             tls[serverAddr]['serverExt'] = obtainExtList(resp["s_extensions"])
#                             tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt']
                           
#                         else:                        
#                             tls[serverAddr]['serverExt'] = zero_exts
#                             tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt'] 
#                             # print("Has No Server Ext",json_file)    
                            
#                         if "scs" in resp:
#                             temp = []
#                             temp.append(resp["scs"])
#                             tls[serverAddr]['serverCS'] = temp #list of strings    
#                             tls_holder_array.append(tls[serverAddr]['serverCS'][0])
#                             if (tls[serverAddr]['serverCS'] not in server_cert_holder):
#                                 server_cert_holder.append(tls[serverAddr]['serverCS'])
#                         else:
#                             tls[serverAddr]['serverCS'] = []
#                             tls_holder_array.append(0)
#                             print("Has No Server CS",json_file)
                            
#                         #1 times
#                         tls[serverAddr]['flowTimes'] = getTimes(tmp)
#                         flow_times_Flatten=tls[serverAddr]['flowTimes']
                        
#                         #2 lengths
#                         tls[serverAddr]['flowLengths'] = getLengths(tmp)
#                         flow_length_Flatten=tls[serverAddr]['flowLengths'] 
                        
#                         # meta_features=getMetadata(tmp)
#                         Splt_Flatten=flow_length_Flatten+flow_times_Flatten
                        
                        
#                         meta=[]
#                         meta=getMetadata(tmp)
#                         tls_holder_array.append(1)
#                         # tls_holder_array.append(fileName)
#                     t=[]
                    
#                     # if (len(tls_holder_array)>235):
#                     #     t=tls_holder_array[0:235]
#                     #     print("Meta Length:",len(meta),len(t))
#                     # else:
#                     t=tls_holder_array
#                         # print(serverAddr)
#                     total_data=meta+Splt_Flatten+t
                    
#                     # CSVWriter(total_data)
#                     # print(len(total_data))
                    
#                     total_flow_count+=1 
    
#     return total_data          

def Analyze_TLS(inPathName, fileName, tls,csv_file_name,csv_folder_name,tresh): 
    json_file = "%s%s" % (inPathName, fileName)
    print("processing Features of : %s" %(json_file)) #verbose
    time.sleep(0.5)
    #read each line and convert it into dict
    lineno = 0
    size_cs=len(cs_dictionary)
    cs_holder_binary=[0]*size_cs 
    
    size_Scs=len(server_CS)    
    Scs_holder_binary=[0]*size_Scs 
    new_cipher_holder=[]
    total_data=[]
    with gzip.open(json_file,'r') as fp:
        cs_holder_array=[]
        Scs_holder_array=[]
       
        serverAddr_holder=[] 
        zero_exts=[0]*29
        zero_cs=[0]*171
        zero_Scs=[0]*25
        i=0
        total_data=[]
        total_flow_count=0
        for line in fp:
            tls_holder_array=[]
            lineno = lineno + 1
            tmp = json.loads(line)
            
            if ('version' in tmp) or ("tls" not in tmp) or (int(tmp["dp"]) != 443):
                continue
            if ('version' not in tmp) and 'tls' in tmp   and (int(tmp["dp"]) == 443):
                serverAddr = "%s__%s__%s"%(tmp["sa"],str(tmp["sp"]),tmp["da"])
                resp = tmp["tls"] 
                if total_flow_count>tresh:
                    continue
                else:    
                    if('s_cert' not in resp or serverAddr in serverAddr_holder):
                        continue
                    else:
                        serverAddr_holder.append(serverAddr)
                        tls[serverAddr] = defaultdict()
                        tls[serverAddr]['count'] = 1
                        tls[serverAddr]['ts_start'] = tmp["time_start"]
                        tls[serverAddr]['ts_end'] = tmp["time_end"] 
                        if "c_version" in resp:
                            tls[serverAddr]['c_version']=resp["c_version"]
                            tls_holder_array.append(tls[serverAddr]['c_version'])
                        else:
                            tls_holder_array=0
                        if "cs" in resp:
                            tls[serverAddr]['clientCS'] = resp["cs"]
                            cs_holder_array=tls[serverAddr]['clientCS']
                            for a in range(0,len(cs_holder_array)):
                                x=str(cs_holder_array[a])
                                if x in cs_dictionary:
                                    index=cs_dictionary.index(x)
                                    cs_holder_binary[index]=1
                            for j in range(0,len(cs_holder_array)):
                                d=str(cs_holder_array[j])
                                if d not in cs_dictionary:
                                    # print(json_file)
                                    # print("New CipherSuit :",d)
                                    if d not in new_cipher_holder:
                                        new_cipher_holder.append(d)
                                    pass 
                            fileName, file_extension=os.path.splitext(fileName) 
                            tls_holder_array=tls_holder_array+cs_holder_binary
                            i=i+1  
                        else:
                            tls[serverAddr]['clientCS'] = zero_cs
                            tls_holder_array=tls_holder_array+tls[serverAddr]['clientCS']
                            # print("Has No Client CS",json_file)
                        if "c_extensions" in resp:  
                            tls[serverAddr]['clientExt'] = obtainExtList(resp["c_extensions"]) 
                            tls_holder_array=tls_holder_array+tls[serverAddr]['clientExt'] 
                        else:
                            tls[serverAddr]['clientExt'] =zero_exts
                            tls_holder_array=tls_holder_array+tls[serverAddr]['clientExt']   
                            # print("Has No ClientExt",json_file,tls[serverAddr]['clientExt'])
                        
                        if "s_extensions" in resp:
                            tls[serverAddr]['serverExt'] = obtainExtList(resp["s_extensions"])
                            tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt']  
                        else:   
                            tls[serverAddr]['serverExt'] = zero_exts
                            tls_holder_array=tls_holder_array+tls[serverAddr]['serverExt'] 
                            # print("Has No Server Ext",json_file)
                        if "scs" in resp: 
                            temp = []
                            temp.append(resp["scs"])
                            tls[serverAddr]['serverCS'] = temp #list of strings 
                            Scs_holder_array=tls[serverAddr]['serverCS']
                            for a in range(0,len(Scs_holder_array)):
                                x=str(Scs_holder_array[a])
                                if x in Scs_dictionary:
                                    index=Scs_dictionary.index(x)
                                    Scs_holder_binary[index]=1 
                            tls_holder_array=tls_holder_array+Scs_holder_binary  
                        else:
                            tls[serverAddr]['serverCS'] = zero_Scs
                            tls_holder_array=tls_holder_array+tls[serverAddr]['serverCS']
                            # print("Has No Server CS",json_file)
                        if "s_cert" in resp:
                            cert = resp["s_cert"]
                            #6. number of certificates
                            tls[serverAddr]['certCount'] = len(cert)
                            tls_holder_array.append(tls[serverAddr]['certCount']) 
                            
                            #7. number of validity in day
                            tls[serverAddr]['certValidDays'] = obtainValidList(cert) #list of validity
                            tls_holder_array.append(tls[serverAddr]['certValidDays'][0])
                            
                            #8. whether self-signed
                            tls[serverAddr]['certSelfSigned'] = obtainSelfSigned(cert)
                            if tls[serverAddr]['certSelfSigned']=='False':
                                tls_holder_array.append(0)
                            else:
                                tls_holder_array.append(1) 
                            #9. number of subject alternative names 
                            tls[serverAddr]['certSubAltNames'] = obtainSANs(cert) 
                            if (len(tls[serverAddr]['certSubAltNames'])==0): 
                                tls_holder_array.append(0) 
                            else:
                                tls_holder_array.append(tls[serverAddr]['certSubAltNames'][0])  
                        else: 
                            tls[serverAddr]['certCount'] = 0
                            tls_holder_array.append(tls[serverAddr]['certCount'])
                            tls[serverAddr]['certValidDays'] = []
                            if (len(tls[serverAddr]['certValidDays'])==0):
                                tls_holder_array.append(0)
                            tls[serverAddr]['certSelfSigned'] = 0
                            tls_holder_array.append(tls[serverAddr]['certSelfSigned'])
                            tls[serverAddr]['certSubAltNames'] = []
                            tls_holder_array.append(0) 
                            # server-selected ciphersuite 
                        if "c_key_length" in resp:
                            tls[serverAddr]['clientKeyLen'] = resp["c_key_length"]-16
                            tls_holder_array.append(resp["c_key_length"]-16)
                        else:
                            tls[serverAddr]['clientKeyLen'] =0
                            tls_holder_array.append(tls[serverAddr]['clientKeyLen']) 
                            # print("Has No Client Key",json_file)
                                  #1 times  
                        tls[serverAddr]['flowTimes'] = Sequence_of_Packet_Times(tmp)
                        flow_times_Flatten=tls[serverAddr]['flowTimes']
                        #2 lengths
                        tls[serverAddr]['flowLengths'] =  Sequence_of_Packet_Lengths(tmp)
                        flow_length_Flatten=tls[serverAddr]['flowLengths'] 
                        # flow_times_Flatten.append(1)
                        # meta_features=getMetadata(tmp)
                        Splt_Flatten=flow_length_Flatten+flow_times_Flatten
                        meta=[]
                        meta=Meta_Features(tmp)
                    tls_features=[] 
                    tls_features=tls_holder_array  
                    stat_features=[]    
                    stat_f=statistical_forward_packet_features(tmp)
                    stat_b=statistical_backward_packet_features(tmp)
                    for i in range (0,len(stat_f)):
                        stat_features.append(stat_f[i]) 
                    for i in range (0,len(stat_b)):
                        stat_features.append(stat_b[i])
                       
                    tls_features.append('Normal')
                    total_data=meta+stat_features+Splt_Flatten+tls_features  
                      
                    if len(total_data)!=306:
                        print(len(total_data))    
                    CSVWriter(total_data,csv_file_name,csv_folder_name) 
                    total_flow_count+=1 
    return total_data        
def main():
    #setup input folder and output folders          
    # inputF='/home/elliot/joy-master/JoyOutputFolder/'
    tresh=1
    inputF='/home/elliot/Desktop/Family/Normal/'
    csv_file_name='Normal.csv'
    csv_folder_name='/home/elliot/Desktop/CSV_Files/Family2/'
    Files = os.listdir(inputF)
    Files.sort()
    print("Total Files :",len(Files))
    json=True
    figure=False
    allFile=False
    if inputF == None or not os.path.isdir(inputF):
        print("No valid input folder!")
    else:
        joyFolder = inputF
        if not joyFolder.endswith('/'):
            joyFolder += '/'
    parentFolder = os.path.abspath(os.path.join(joyFolder, os.pardir))
    if not parentFolder.endswith('/'):
        parentFolder += '/'
    TLS_JSON_Folder = "%sTLS_JSON/" % parentFolder
    TLS_Figure_Folder = "%sTLS_Figure" % parentFolder  
    if json:
        if allFile == True: 
            tls = defaultdict()
            allFileName = ""
        files = os.listdir(joyFolder)
        for item in files:
            if allFile == True: 
                allFileName += (item.split('.'))[0] + "-"
            try:
                if allFile == False: 
                    tls = defaultdict()
                Analyze_TLS(joyFolder, item, tls,csv_file_name,csv_folder_name,tresh)
                saveToJson(TLS_JSON_Folder, item, tls)
                if allFile == False: 
                    saveToJson(TLS_JSON_Folder, item, tls) 
            except:
                continue
        if allFile == True:
            allFileName +=  ".json"
            saveToJson(TLS_JSON_Folder, allFileName, tls) 
    if figure:
        if allFile == True: 
            allFileName = ""
            files = os.listdir(joyFolder)
            for item in files:
                allFileName += (item.split('.'))[0] + "-"
            allFileName +=  ".json"
            fName = TLS_JSON_Folder + (allFileName.split('.'))[0] + "_TLS.json"
            if os.path.exists(fName):
                try:
                    with open(fName,'r') as fp:
                        tls = json.load(fp) 
                except:
                    pass
            else:
                tls = defaultdict()
                for item in files:
                    try:
                        Analyze_TLS(joyFolder, item, tls,csv_file_name,csv_folder_name,tresh)
                    except:
                        continue 
        else:
            files = os.listdir(joyFolder)
            for item in files:
                try:
                    fName = TLS_JSON_Folder + (item.split('.'))[0] + "_TLS.json"
                    if os.path.exists(fName):
                        with open(fName,'r') as fp:
                            tls = json.load(fp)
#                             plotTLS(tls, joyFolder, item, TLS_Figure_Folder)
                    else:
                        tls = defaultdict()
                        Analyze_TLS(joyFolder, item, tls,csv_file_name,csv_folder_name,tresh)
#                         plotTLS(tls, joyFolder, item, TLS_Figure_Folder)
                except:
                    continue
    print("TLS Feature Extracted")
if __name__ == "__main__":
    ts=time.time()
    main() 
    print("Features extracted and saved to csv")
    print("Total Time Taken :",time.time()-ts,"Seconds")