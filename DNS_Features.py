#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  6 10:36:51 2021

@author: elliot
"""

import ujson as json
import sys
import gzip
#import seolib as seo
from collections import defaultdict
import argparse
import os
import matplotlib.pyplot as plt
import numpy as np
import urllib.request, re
import time
import csv

# a function to collect the number of numerical character or non-alphanum
def obtainNumAndNonnum(url):
	num = 0
	nonnum = 0
	for c in url:
		if c.isdigit():
			num = num+1
		elif c == '.' or c == '*':
			nonnum = nonnum + 1
	return num, nonnum

# a function to collect the number of IPs and TTL
def obtainIPAndTTL(rr):
	ips = []
	ttls = []
	for item in rr:
		if "a" in item:
			ips.append(item["a"])
			try:
				t = int(item["ttl"])
			except:
				t = 0
			ttls.append(t)
	return (ips, ttls)
def CSVWriter(row):
    file='DNS.csv'
    Folder='/home/elliot/Desktop/CSV_Files'
    os.chdir(Folder)
    Files = os.listdir(Folder) 
    if file in Files:
        with open(file, 'a', newline='',encoding='UTF8') as f_object:
            writer = csv.writer(f_object) 
            writer.writerow(row) 
            f_object.close()
    else:
         file=open(file, 'w', newline='',encoding='UTF8')
         with open(file, 'a', newline='') as f_object:
            writer = csv.writer(f_object) 
            # writer.writerow(header)
            writer.writerow(row) 
            f_object.close()

def ProcessDNS_Features(inPathName,fileName):
    dns = defaultdict()	
    json_file = "%s%s" % (inPathName, fileName)
    print("processing DNS for %s" %(json_file)) #verbose
    #read each line and convert it into dict
    total = 0
    with gzip.open(json_file,'r') as fp: 
        dns_holder_array=[]
        total_flow_count=0
        for line in fp: 
                tmp = json.loads(line)
                if ('version' in tmp) or (int(tmp["dp"]) != 443):
                    continue
                if ('version' not in tmp and (int(tmp["dp"]) == 443)):
                     
                     if total_flow_count>5000:
                         continue
                     else:
                        print(tmp["dns"])
                        resp = tmp["dns"][0]
                        rname = resp["rn"]
                        rrecord = resp["rr"]
                        dns[rname]['count'] += 1			
                        dns[rname] = defaultdict()
                        dns[rname]['count'] = 1
                        #1. length of the query name
                        dns[rname]['len'] = len(rname)
                        dns_holder_array.append(len(rname))
                        #2. suffixes
                        dns[rname]['suffix'] = rname.split('.')[-1]
                        first, second = obtainNumAndNonnum(rname)
                        
                        #3. # of numerical character
                        dns[rname]['num'] = first
                        #4 # of wildcards or periods
                        dns[rname]['nonnum'] = second
                        dns_holder_array.append(first)
                        dns_holder_array.append(second)
                        first, second = obtainIPAndTTL(rrecord)
                        dns[rname]['ips'] = first
        				#5. # of IP addresses
                        dns[rname]['ipCount'] = len(first)
        				#6. ttl
                        dns[rname]['ttls'] = second
                        
                        dns_holder_array.append(len(first))
                        dns_holder_array.append(second)
                        print(dns_holder_array)
        				#7. Alexa rank
        # 				dns[rname]['rank'] = obtainAlexa(rname)
                total_flow_count+=1
                print(dns_holder_array)
                   

def saveToJson(outPathName, fileName, dns):
	fname = "%s%s_DNS.json" % (outPathName, (fileName.split('.'))[0])
	#print("save JSON to %s" % (fname)) #verbose
	with open(fname, 'w') as fp:
		json.dump(dns, fp)		

def main():
	inputF='/home/elliot/Desktop/Json_Files/AASTU_Normal/'
    #setup input folder and output folders
	Files = os.listdir(inputF)
	Files.sort()
	json="True"
	allFile ="True"
	figure="False"
	#setup input folder and output folders
	if inputF== None or not os.path.isdir(inputF):
		print("No valid input folder!") #verbose
		return
	else:
		joyFolder = inputF
		if not joyFolder.endswith('/'):
			joyFolder += '/'
	parentFolder = os.path.abspath(os.path.join(joyFolder, os.pardir))
	if not parentFolder.endswith('/'):
		parentFolder += '/'
	if json:
		if allFile == True: 
			dns = defaultdict()
			allFileName = ""
		files = os.listdir(joyFolder)
		for item in files:
			if allFile == True: 
				allFileName += (item.split('.'))[0] + "-"
			try:
				if allFile == False: 
					dns = defaultdict()
				ProcessDNS_Features(joyFolder,item)
			except:
				continue 
	#check if output figures
	elif figure:
		if allFile == True: 
			allFileName = ""
			files = os.listdir(joyFolder)
			for item in files:
				allFileName += (item.split('.'))[0] + "-"
			allFileName +=  ".json"
		else:
			files = os.listdir(joyFolder)
			for item in files:
				try:
						ProcessDNS_Features(joyFolder, item)
				except:
					continue
if __name__ == "__main__":
	main()
	
